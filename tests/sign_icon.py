#
# Copyright (C) 2022 markrypto <cryptoakorn@gmail.com>
#
# This library is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.


from doctest import testfile
import unittest
import common
import binascii
import json

from keepkeylib import tools


class TestMsgEthvm(common.KeepKeyTest): 
    def test_ethereum_sign_icon(self):
        # self.setup_mnemonic_nopin_nopassphrase()
        gnosisIconData = bytes([
            0x7f, 0x0, 0x3a, 0x0, 0xfc, 0x13, 0x32, 0x98, 0xc8, 0x2, 0xda, 0xfd, 0xc9, 0x9a, 0x35, 0xb, 0x0, 0xfc, 0x8e, 0xe6, 
            0xf0, 0xd8, 0x2, 0xc2, 0xfc, 0xd7, 0xf0, 0xe7, 0x91, 0x9, 0x0, 0xfc, 0xad, 0xf1, 0xc2, 0x58, 0x4, 0x13, 0xfc, 0x56,
            0xc0, 0xf1, 0xb0, 0x7, 0x0, 0xfd, 0x9e, 0xf0, 0x98, 0x8, 0x13, 0xfd, 0x95, 0xf0, 0xa1, 0x5, 0x0, 0xfc, 0x1a, 0xe1,
            0xd4, 0x16, 0x8, 0x13, 0xfc, 0x15, 0xd1, 0xe3, 0x1e, 0x4, 0x0, 0xfc, 0x77, 0x76, 0xee, 0xab, 0x8, 0x13, 0xfc, 0xa6,
            0xee, 0x79, 0x78, 0x3, 0x0, 0xfa, 0x55, 0xef, 0x89, 0x96, 0xf0, 0x8c, 0x6, 0x13, 0xfa, 0x87, 0xf0, 0x99, 0x86, 
            0xef, 0x5a, 0x2, 0x0, 0xf9, 0xa1, 0xf2, 0xc0, 0x13, 0xb4, 0xec, 0x6b, 0x4, 0x13, 0xf9, 0x66, 0xeb, 0xb7, 0x13, 
            0xbd, 0xf2, 0xa5, 0x2, 0x0, 0xf8, 0xc8, 0xf2, 0x7b, 0xbe, 0x49, 0xcc, 0xe2, 0x49, 0x2, 0x13, 0xf8, 0x44, 0xe0, 
            0xcf, 0x47, 0xbf, 0x74, 0xf2, 0xcb, 0x2, 0x0, 0xee, 0xda, 0xf2, 0x3d, 0xeb, 0xd2, 0x45, 0xdd, 0xd3, 0x27, 0x21,
            0xd1, 0xdf, 0x47, 0xd0, 0xef, 0x38, 0xf2, 0xdd, 0x2, 0x0, 0xee, 0xe5, 0xf2, 0x5d, 0xe1, 0xf2, 0xbc, 0x60, 0xe9, 
            0xbd, 0xba, 0xea, 0x64, 0xb9, 0xf2, 0xe4, 0x54, 0xf2, 0xeb, 0x2, 0x0, 0xfc, 0xe5, 0xf2, 0xa6, 0x9d, 0x2, 0xf2, 
            0xfe, 0xa2, 0x7b, 0x2, 0xef, 0xfe, 0x7e, 0x9f, 0x2, 0xf2, 0xfc, 0xa0, 0xa3, 0xf2, 0xeb, 0x2, 0x0, 0xee, 0xda, 0xf2,
            0xe9, 0x5f, 0x82, 0xa6, 0x60, 0x41, 0x9b, 0x9e, 0x42, 0x5d, 0xa6, 0x84, 0x5b, 0xe8, 0xf2, 0xdd, 0x2, 0x0, 0xff, 
            0xc9, 0x2, 0xf2, 0xf4, 0xe9, 0xae, 0x94, 0xc2, 0xe9, 0x63, 0x60, 0xe8, 0xc4, 0x94, 0xad, 0xe9, 0x2, 0xf2, 0xff, 
            0xcb, 0x2, 0x0, 0xff, 0xa1, 0x7, 0xf2, 0xfe, 0xe0, 0xde, 0x7, 0xf2, 0xff, 0xa5, 0x2, 0x0, 0xfe, 0x56, 0xf0, 0xe, 
            0xf2, 0xfe, 0xf1, 0x5b, 0x3, 0x0, 0xff, 0xc7, 0xe, 0xf2, 0xff, 0xca, 0x4, 0x0, 0xfe, 0x62, 0xee, 0xc, 0xf2, 0xfe, 
            0xef, 0x67, 0x4, 0x0, 0xfe, 0x13, 0x9f, 0xc, 0xf2, 0xfe, 0xa3, 0x13, 0x5, 0x0, 0xfe, 0x13, 0xae, 0xa, 0xf2, 0xfe, 
            0xb1, 0x13, 0x7, 0x0, 0xfd, 0x13, 0x90, 0xe7, 0x6, 0xf2, 0xfd, 0xe8, 0x93, 0x13, 0x9, 0x0, 0xfc, 0x13, 0x35, 0x9a, 
            0xc9, 0x2, 0xdb, 0xfc, 0xca, 0x9c, 0x37, 0x13, 0x7f, 0x0, 0x3a, 0x0
        ])


        ethIconData = bytes([
            0x31, 0x0, 0xfe, 0x46, 0x71, 0x12, 0x0, 0xfe, 0x60, 0x9d, 0x12, 0x0, 
            0xfe, 0x77, 0xc2, 0x11, 0x0, 0xfc, 0x33, 0x7c, 0xcf, 0x53, 0x10, 0x0, 
            0xfc, 0x5a, 0x7c, 0xcf, 0x95, 0x10, 0x0, 0xfc, 0x6d, 0x7c, 0xcf, 0xb5, 
            0x10, 0x0, 0x2, 0x7c, 0x2, 0xcf, 0xff, 0x3d, 0xe, 0x0, 0xff, 0x4f, 0x2, 
            0x7c, 0x2, 0xcf, 0xff, 0x83, 0xe, 0x0, 0xff, 0x6a, 0x2, 0x7c, 0x2, 0xcf, 
            0xff, 0xae, 0xe, 0x0, 0xff, 0x7b, 0x2, 0x7c, 0x2, 0xcf, 0xfe, 0xc8, 0x13, 
            0xc, 0x0, 0xff, 0x44, 0x3, 0x7c, 0x3, 0xcf, 0xff, 0x73, 0xc, 0x0, 0xff, 
            0x5f, 0x3, 0x7c, 0x3, 0xcf, 0xff, 0x9f, 0xc, 0x0, 0xff, 0x74, 0x3, 0x7c, 
            0x3, 0xcf, 0xff, 0xc3, 0xb, 0x0, 0xff, 0x30, 0x3, 0x7c, 0xfe, 0x9c, 0xd9, 
            0x3, 0xcf, 0xff, 0x54, 0xa, 0x0, 0xff, 0x5a, 0x2, 0x7c, 0xfc, 0xa2, 0xca, 
            0xec, 0xdb, 0x2, 0xcf, 0xff, 0x94, 0xa, 0x0, 0xfd, 0x75, 0x7c, 0xa9, 0x2, 
            0xca, 0x2, 0xec, 0xfd, 0xde, 0xcf, 0xb9, 0x9, 0x0, 0xfd, 0x2a, 0x7c, 0xb1,
            0x3, 0xca, 0x3, 0xec, 0xfd, 0xe1, 0xcf, 0x43, 0x8, 0x0, 0xfe, 0x55, 0xb5, 
            0x4, 0xca, 0xfe, 0xec, 0xed, 0x2, 0xec, 0xfe, 0xe3, 0x86, 0x8, 0x0, 0xff, 
            0x8a, 0x5, 0xca, 0xff, 0xeb, 0x3, 0xec, 0xfe, 0xed, 0x9f, 0x9, 0x0, 0xff, 
            0xa7, 0x4, 0xca, 0xff, 0xed, 0x2, 0xec, 0xfe, 0xeb, 0xbd, 0xa, 0x0, 0xfe, 
            0x28, 0xb3, 0x3, 0xca, 0x3, 0xec, 0xfe, 0xd0, 0x2f, 0x9, 0x0, 0xfc, 0x47, 
            0x0, 0x3c, 0xbf, 0x2, 0xca, 0x2, 0xec, 0xfc, 0xdf, 0x55, 0x0, 0x72, 0x9, 
            0x0, 0xf6, 0x77, 0x0, 0x5c, 0xc7, 0xca, 0xec, 0xe8, 0x75, 0x0, 0xc2, 0xa, 
            0x0, 0xf6, 0x64, 0x76, 0x0, 0x70, 0xc9, 0xec, 0x7f, 0x0, 0xc3, 0x9e, 0xa, 
            0x0, 0xf6, 0x39, 0x7c, 0x6d, 0x16, 0x87, 0x9f, 0x0, 0xb7, 0xcf, 0x63, 0xb, 
            0x0, 0xfd, 0x7a, 0x7c, 0x6a, 0x2, 0x0, 0xfd, 0xa8, 0xcf, 0xc0, 0xc, 0x0, 
            0xff, 0x5b, 0x2, 0x7c, 0xfe, 0x5d, 0x94, 0x2, 0xcf, 0xff, 0x96, 0xd, 0x0, 
            0x3, 0x7c, 0x3, 0xcf, 0xe, 0x0, 0xff, 0x74, 0x2, 0x7c, 0x2, 0xcf, 0xff, 
            0xb9, 0xe, 0x0, 0xff, 0x55, 0x2, 0x7c, 0x2, 0xcf, 0xff, 0x8b, 0xf, 0x0, 
            0xfc, 0x7d, 0x7c, 0xcf, 0xce, 0x10, 0x0, 0xfc, 0x6d, 0x7c, 0xcf, 0xb1, 
            0x10, 0x0, 0xfc, 0x4e, 0x7c, 0xcf, 0x81, 0x11, 0x0, 0xfe, 0x7b, 0xcb, 0x12, 
            0x0, 0xfe, 0x69, 0xac, 0x12, 0x0, 0xfe, 0x45, 0x74, 0x12, 0x0, 0xfe, 0x20, 
            0x17, 0x16, 0x0, 0xff, 0xf, 0x6, 0x0
        ])

        self.requires_firmware("7.6.0")
        f = open('evptests.json')
        test = json.load(f)
        f.close()
        
        self.client.load_device_by_mnemonic(mnemonic=test['mnemonic'], pin='', passphrase_protection=False, label='test', language='english')

        print(gnosisIconData.hex())
        
        retval = self.client.ethereum_sign_message(
            n = tools.parse_path("m/44'/60'/2'/0/0"),
            message = bytes(json.dumps(test['iconGnosis']['iconChain']), 'utf8')
        ) 

        print(retval.address.hex())
        print(binascii.hexlify(retval.signature))
        print(retval.signature)        

if __name__ == "__main__":
    unittest.main()
